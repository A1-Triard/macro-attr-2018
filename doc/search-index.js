var searchIndex = {};
searchIndex['enum_derive'] = {"items":[[0,"","enum_derive","This crate provides several macros for deriving some useful methods for unitary enums (*i.e.* enums where variants do not have payloads).",null,null],[3,"ParseEnumError","","This is the error type used for derived implementations of `FromStr` for unitary enums.",null,null],[11,"eq","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"parseenumerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"parseenumerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"parseenumerror"}],"output":{"name":"parseenumerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"parseenumerror"}],"output":{"name":"str"}}],[14,"IterVariants!","","",null,null],[14,"IterVariantNames!","","",null,null],[14,"NextVariant!","","",null,null],[14,"PrevVariant!","","",null,null],[14,"EnumDisplay!","","",null,null],[14,"EnumFromStr!","","",null,null]],"paths":[[3,"ParseEnumError"]]};
searchIndex['newtype_derive'] = {"items":[[0,"","newtype_derive","This crate provides several macros for deriving implementations of various traits for \"newtype\" wrappers (*i.e.* tuple structs with a single element).  That is, given a tuple struct with exactly one field (*e.g.* `struct Buckets(i32)`), these macros will derive \"obvious\" implementations of traits such as `Add`, `Neg`, `Index`, `Deref`, `From`, etc.",null,null],[14,"NewtypeAdd!","","",null,null],[14,"NewtypeBitAnd!","","",null,null],[14,"NewtypeBitOr!","","",null,null],[14,"NewtypeBitXor!","","",null,null],[14,"NewtypeDiv!","","",null,null],[14,"NewtypeMul!","","",null,null],[14,"NewtypeRem!","","",null,null],[14,"NewtypeSub!","","",null,null],[14,"NewtypeShl!","","",null,null],[14,"NewtypeShr!","","",null,null],[14,"NewtypeNeg!","","",null,null],[14,"NewtypeNot!","","",null,null],[14,"NewtypeDeref!","","",null,null],[14,"NewtypeDerefMut!","","",null,null],[14,"NewtypeIndex!","","",null,null],[14,"NewtypeIndexMut!","","",null,null],[14,"NewtypeFrom!","","",null,null],[14,"NewtypeBinary!","","",null,null],[14,"NewtypeDebug!","","",null,null],[14,"NewtypeDisplay!","","",null,null],[14,"NewtypeLowerExp!","","",null,null],[14,"NewtypeLowerHex!","","",null,null],[14,"NewtypeOctal!","","",null,null],[14,"NewtypePointer!","","",null,null],[14,"NewtypeUpperExp!","","",null,null],[14,"NewtypeUpperHex!","","",null,null]],"paths":[]};
searchIndex['custom_derive'] = {"items":[[0,"","custom_derive","This crate provides a macro that enables the use of custom `derive` attributes.",null,null]],"paths":[]};
initSearch(searchIndex);
